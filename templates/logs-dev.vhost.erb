# -*- apache -*-
# ************************************
# Managed by Puppet
# ************************************

<VirtualHost *:<%= @port %>>
  ServerName <%= @vhost_name %>
<% if @serveraliases.is_a? Array -%>
  # Permanently redirect these ServerAlias entries to ServerName
<% @serveraliases.each do |name| -%><%= " ServerAlias #{name}\n" %><% end -%>
<% elsif @serveraliases != '' -%>
<%= " ServerAlias #{@serveraliases}" %>
  RewriteEngine On
  RewriteCond %{HTTP_HOST} !<%= @vhost_name %>$ [NC]
  RewriteRule ^/(.*)$ http://<%= @vhost_name %>/$1 [L,R=301]
<% end -%>
  DocumentRoot <%= @docroot %>

  # use Apache to compress the results afterwards, to save on the wire
  # it's approx 18x savings of wire traffic to compress. We need to
  # compress by content types that htmlify can produce
  AddOutputFilterByType DEFLATE text/plain text/html application/x-font-ttf image/svg+xml

  <FilesMatch \.html\.gz$>
    ForceType text/html
    AddDefaultCharset UTF-8
    AddEncoding x-gzip gz
  </FilesMatch>
  <FilesMatch \.css\.gz$>
    ForceType text/css
    AddDefaultCharset UTF-8
    AddEncoding x-gzip gz
  </FilesMatch>
  <FilesMatch \.js\.gz$>
    ForceType text/javascript
    AddDefaultCharset UTF-8
    AddEncoding x-gzip gz
  </FilesMatch>
  <FilesMatch \.ttf\.gz$>
    ForceType application/x-font-ttf
    AddEncoding x-gzip gz
  </FilesMatch>
  <FilesMatch \.svg\.gz$>
    ForceType image/svg+xml
    AddEncoding x-gzip gz
  </FilesMatch>
  <Directory <%= @docroot %>>
    Options <%= @options %>
    AllowOverride None
    Order allow,deny
    allow from all
    Satisfy Any
  </Directory>
  <Directory /usr/local/lib/python2.7/dist-packages/os_loganalyze>
    Allow from all
    Satisfy Any
  </Directory>

<% @readmes.each do |pattern, helpfile| -%>
  <Directory <%= @docroot %><%= pattern %>>
    ReadmeName <%= helpfile %>
  </Directory>
<% end -%>

  RewriteEngine On
  # If the specified file does not exist, look if there is a gzipped version
  # If there is, serve that one instead
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME}.gz -f
  RewriteRule ^/(.*)$ %{REQUEST_URI}.gz

  # rewrite txt.gz & console.html[.gz] files to map to our internal htmlify
  # wsgi app
  # PT, Pass-through:  to come back around and get picked up by the
  #                    WSGIScriptAlias
  # NS, No-subrequest: on coming back through, mod-autoindex may have added
  #                    index.html which would match the !-f condition. We
  #                    therefore ensure the rewrite doesn't trigger by
  #                    disallowing subrequests.
  RewriteRule ^/(.*\.txt\.gz)$ /htmlify/$1 [QSA,L,PT,NS]
  RewriteRule ^/(.*console\.html(\.gz)?)$ /htmlify/$1 [QSA,L,PT,NS]

  # Check if the request exists as a file, directory or symbolic link
  # If not, write the request to htmlify to see if we can fetch from swift
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-d
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-l
  RewriteCond %{REQUEST_FILENAME} !^/icon
  RewriteRule ^/(.*)$ /htmlify/$1 [QSA,L,PT,NS]

  WSGIScriptAlias /htmlify /usr/local/lib/python2.7/dist-packages/os_loganalyze/wsgi.py

  LogLevel warn
  ErrorLog /var/log/apache2/<%= @vhost_name %>_error.log
  CustomLog /var/log/apache2/<%= @vhost_name %>_access.log combined
  ServerSignature Off
</VirtualHost>
